#【xmlからcsvを生成する為のヒント】

・<data>の要素は、複数のファイルで共通する
・連番番号は特開、特表を示す。これを利用してCSVの名前を付ける
・
・
・
・
・
・
・
・ef translate(xxx,yyy): # tlanslate関数の宣言
    root = Tk() # 実行内容の処理の開始位置
    root.title('抽出プログラム') # ウインドウのタイトル
    root.geometry("550x200+450+250") # ウインドウのサイズ
    frameP= ttk.Frame(root, padding=10)
    frameP.grid(sticky=(W,E))
    frameP.columnconfigure(0, weight=1);
    frameP.rowconfigure(0, weight=1);
    # drive = r"C:\Users\T15015\PycharmProjects\test_area\drive"
    drive = xxx
    # print(drive)
    # save = r"C:\Users\T15015\PycharmProjects\test_area\save"
    save = yyy
    # print(save + "\n")
    exe = 0

    os.chdir(drive) # カレントディレクトリを走査対象に移動
    path_list = glob.glob('**/*.xml', recursive=True) # 拡張子.xmlを網羅,リストに格納

    list_max = len(path_list) # 変換するxmlファイルの総数を取得
    count = 0 # 変換終了変数countの初期化
    # print("機能α[変換]残り" + str(list_max))
    # print("-*-*-*-*-*-operation-α-_start-*-*-*-*-*-\n")

    for x in path_list: # 拡張子.xml格納リストを網羅表示
        fromdir = drive + '\\' + x # 変数fromdir::操作対象絶対パス
        # print("変換対象：：" + fromdir) # ↑の表示(確認)
        y = os.path.basename(fromdir) # 変数y::操作対象のファイル名取得
        todir = save + '\\' + y # 変数todir::保存先ディレクトリの絶対パス
        # print("保存先：：" + todir) # ↑の表示(確認)
        # ↓ 変換&新規出力
        ff = codecs.open(fromdir, 'r', encoding='euc-jp') # 元ファイルを読み込み
        fout_utf = open(todir, 'w', encoding='utf-8') # UTFでの新ファイルを新規作成
        for row in ff: # 元ファイルから１行ずつ読みだして
            # 宣言文(一行目)を空白に置き換えるコード
            row = row.replace('<?xml version="1.0" encoding="EUC-JP"?>', '') # 一行目

            fout_utf.write(row) # コピー先新ファイルに書き出す
        ff.close() # ffを閉じる
        fout_utf.close() # fout_utfを閉じる
        count = count + 1 # カウントアップ
        progress = round((count / list_max) * 100, 1) # 変数progress:進捗割合 # ローカル変数

        progress_bar = ttk.Progressbar(frameP,orient=HORIZONTAL,length=400,mode='indeterminate')
        progress_bar.configure(maximum=100, value = 0 )
        progress_bar.grid(row=1, column=0, sticky=(N,E,S,W))
        progress_bar.start(100)

        # print(str(progress) + "%完了") # 小数点第一位で切り捨て
        #judge = 0 # 終了判断フラグ　１で終了 # ローカル変数
        root.mainloop()
    print("\n-*-*-*-*-*-operation_end-*-*-*-*-*-")
